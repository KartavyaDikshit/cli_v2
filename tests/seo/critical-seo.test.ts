import { test, expect } from '@playwright/test';

test.describe('Critical SEO Checks for English Homepage', () => {
  test('should have correct title, meta description, hreflang, and canonical URL', async ({ page }) => {
    // 1. Visit the English homepage.
    await page.goto('/en');

    // 2. Verify that the correct <title> and <meta description> are present.
    await expect(page).toHaveTitle('Create Next App');
    const metaDescription = page.locator('meta[name="description"]');
    await expect(metaDescription).toHaveAttribute('content', 'Generated by create next app');

    // 3. Confirm that the page contains exactly six 'hreflang' tags.
    const hreflangLinks = await page.locator('link[rel="alternate"][hreflang]').all();
    expect(hreflangLinks).toHaveLength(6);

    const expectedHreflangs = ['en', 'ja', 'fr', 'de', 'ko', 'x-default'];
    const foundHreflangs = await Promise.all(hreflangLinks.map(link => link.getAttribute('hreflang')));
    expect(foundHreflangs.sort()).toEqual(expectedHreflangs.sort());

    const expectedHrefs = [
      'https://www.yourcompany.com/en',
      'https://www.yourcompany.com/ja',
      'https://www.yourcompany.com/fr',
      'https://www.yourcompany.com/de',
      'https://www.yourcompany.com/ko',
      'https://www.yourcompany.com/en' // x-default points to en
    ];
    const foundHrefs = await Promise.all(hreflangLinks.map(link => link.getAttribute('href')));
    expect(foundHrefs.sort()).toEqual(expectedHrefs.sort());

    // 4. Check for the presence of a valid canonical URL.
    const canonicalLink = page.locator('link[rel="canonical"]');
    await expect(canonicalLink).toHaveAttribute('href', 'https://www.yourcompany.com/en');
  });

  // 5. Assert that the Lighthouse performance score is above a certain threshold.
  // This part cannot be directly implemented with Playwright's built-in capabilities.
  // Playwright focuses on browser automation and testing, not Lighthouse auditing.
  // To achieve this, you would typically use a separate tool or a Playwright plugin
  // that integrates with Lighthouse (e.g., 'lighthouse-ci' or 'playwright-lighthouse').
  // This test case is included as a placeholder to highlight the requirement.
  test.skip('should have a high Lighthouse performance score', async ({ page }) => {
    // Implement Lighthouse integration here if available in your setup.
    // Example (conceptual, requires external setup):
    // const lighthouseScore = await runLighthouseAudit(page.url());
    // expect(lighthouseScore.performance).toBeGreaterThanOrEqual(90);
  });
});
